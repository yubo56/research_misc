'''
self-contained file for the finite-eta simulations
'''
import os
import gc
import pickle
import numpy as np
try:
    import matplotlib
    matplotlib.use('Agg')
    import matplotlib.pyplot as plt
    plt.rc('text', usetex=True)
    plt.rc('font', family='serif', size=16)
    plt.rc('lines', lw=3.5)
    plt.rc('xtick', direction='in', top=True, bottom=True)
    plt.rc('ytick', direction='in', left=True, right=True)
    plt.rc('text.latex', preamble=r'\usepackage{newtxmath}')
except:
    pass

from utils import ts_dot, get_vals, cosd, mkdirp
from multiprocessing import Pool

from scipy.integrate import solve_ivp
from scipy.optimize import brenth
from scipy.interpolate import interp1d
from scipy.fft import dct

params = 30, 20, 30, 100, 4500, 0
params_in = 30, 30, 30, 0.1, 3, 0
# values from LL17, nonzero eta
I_degs_etanz, qslfs_nz = np.array([
    [2.56256, 1.7252483882292753],
    [6.27696, 4.219346735062742],
    [8.50227, 5.714295600421515],
    [10.2583, 6.889823238328885],
    [11.7572, 7.882902860872241],
    [13.0876, 8.768541748337839],
    [14.2967, 9.561690155797915],
    [15.413, 10.294153608904013],
    [16.4555, 10.974424960731971],
    [17.4374, 11.618653204432887],
    [18.3684, 12.233997148224166],
    [19.2559, 12.806922324419485],
    [20.1057, 13.345866587796168],
    [20.9224, 13.886113226171306],
    [21.7097, 14.393185551471028],
    [22.4707, 14.863930989311877],
    [23.208, 15.329518004783656],
    [23.9239, 15.784049278144359],
    [24.6201, 16.238374048642388],
    [25.2983, 16.645468320101816],
    [25.96, 17.06291601898261],
    [26.6063, 17.47881954439917],
    [27.2384, 17.858193978840973],
    [27.8572, 18.248788378838412],
    [28.4636, 18.60412311698293],
    [29.0584, 18.966264862282276],
    [29.6423, 19.31947911065476],
    [30.2159, 19.666508121348823],
    [30.7798, 20.00196831978425],
    [31.3346, 20.332855388775332],
    [31.8807, 20.659307418597844],
    [32.4185, 20.97444260744041],
    [32.9485, 21.28573971274869],
    [33.471, 21.607883434182124],
    [33.9864, 21.90125625559918],
    [34.4951, 22.198796063601794],
    [34.9972, 22.465712617203586],
    [35.4931, 22.74704381726423],
    [35.9831, 23.037281875613328],
    [36.4674, 23.31226905287581],
    [36.9462, 23.579764470549204],
    [37.4198, 23.836418437258228],
    [37.8883, 24.084015402991593],
    [38.3519, 24.34990405510149],
    [38.8108, 24.577806017772314],
    [39.2652, 24.838804726246455],
    [39.7152, 25.079539291507704],
    [40.161, 25.301853666047922],
    [40.6028, 25.54461194897818],
    [41.0406, 25.770600884563468],
    [41.4745, 25.99169281014202],
    [41.9049, 26.191831051413015],
    [42.3316, 26.41233859139507],
    [42.7549, 26.617302273976662],
    [43.1748, 26.83851455037676],
    [43.5914, 27.046153417059283],
    [44.8228, 27.62317940325634],
    [44.4154, 27.43500316100708],
    [44.0049, 27.24005739420256],
    [45.6291, 28.00710780193301],
    [45.2274, 27.807445764722118],
    [46.8182, 28.52238031320687],
    [46.4245, 28.36620270549223],
    [46.0281, 28.186761892555182],
    [47.9846, 29.025604609713902],
    [47.5982, 28.877447869828615],
    [47.2095, 28.7020525501466],
    [48.7504, 29.360774734948215],
    [48.3687, 29.20415642077577],
    [49.8827, 29.799563658558288],
    [49.5074, 29.6546479757655],
    [49.13, 29.49894759759345],
    [50.9963, 30.23130534893325],
    [50.6271, 30.07962678703457],
    [50.2559, 29.94071937157127],
    [51.3637, 30.348475891120582],
    [51.7291, 30.49471280233404],
    [52.0928, 30.606737641001907],
    [52.4546, 30.74557794456809],
    [52.8147, 30.860565060722728],
    [53.1731, 30.96659671578986],
    [53.5298, 31.079717197325635],
    [53.8848, 31.195092858120418],
    [54.2383, 29.637397006941473],
    [54.5902, 30.44307677248422],
    [54.9406, 25.023109810488585],
    [55.2895, 40.87807924384774],
    [55.6369, 83.52570783299788],
    [55.9829, 85.02647348832225],
    [56.6707, 145.19127222069557],
    [56.3275, 90.31947559249976],
    [57.6924, 137.66042112068283],
    [57.3531, 139.29976846705426],
    [57.0126, 126.49773854177914],
    [58.7026, 134.7529292928004],
    [58.3671, 97.39666938235739],
    [58.0303, 128.51649899685725],
    [59.7022, 144.93953459485954],
    [59.3701, 127.8524730046811],
    [59.037, 80.81263210410096],
    [60.6916, 146.5783829604984],
    [60.3629, 67.91426646250957],
    [60.0331, 95.055832717768],
    [61.9962, 84.07011700418825],
    [61.6716, 59.34798137995333],
    [61.3459, 91.84338928334161],
    [61.0193, 60.81520573217315],
    [62.9643, 26.135982505494262],
    [62.6426, 60.88243957961385],
    [62.3199, 143.46346296856933],
    [63.9242, 41.1192715733193],
    [63.6051, 41.61798097400314],
    [63.2852, 47.62168093664826],
    [64.8762, 31.618740073541627],
    [64.5597, 124.43075690122289],
    [64.2424, 118.77249213235746],
    [65.8209, 14.876466254663422],
    [65.5068, 98.24414685021905],
    [65.1919, 18.108569375804496],
    [66.7587, 63.41583008110677],
    [66.4468, 77.89171982116181],
    [66.1342, 73.28475693173515],
    [67.9989, 78.65663359939501],
    [67.6899, 87.54623865558887],
    [67.3802, 39.66501207769029],
    [67.0698, 47.887128925081754],
    [68.9219, 38.802480572364175],
    [68.6149, 65.71763308341303],
    [68.3072, 36.66466966881367],
    [69.8393, 31.85147368683731],
    [69.5341, 79.13627856488662],
    [69.2283, 34.117506524236916],
    [70.7513, 59.68329227220516],
    [70.4478, 27.051841283480332],
    [70.1438, 59.45064983569847],
    [71.0541, 78.89022136244995],
    [71.3564, 96.90202942622125],
    [71.6582, 32.148136154272045],
    [71.9595, 38.11711864145912],
    [72.2602, 75.01262165127477],
    [72.5604, 44.78890804207723],
    [72.8602, 85.5401108487261],
    [73.1594, 44.65409920822142],
    [73.4582, 22.747525163104854],
    [73.7565, 89.06322248629785],
    [74.0544, 60.20586407455485],
    [74.3518, 46.815979817741685],
    [74.6488, 46.454420525950994],
    [74.9454, 40.73972133896699],
    [75.2415, 30.059207508313524],
    [75.5373, 43.979119194771705],
    [75.8326, 48.66783269712936],
    [76.1276, 43.53508566110924],
    [76.4222, 31.408466199538754],
    [76.7165, 40.22029164715755],
    [77.0104, 38.38531013738017],
    [77.3039, 38.82590772618537],
    [77.5971, 36.34016189052759],
    [77.89, 49.46301755718182],
    [78.1825, 40.62900482510828],
    [78.4747, 41.38372048774677],
    [78.7667, 38.5336906602654],
    [79.0583, 34.73870971771819],
    [79.3497, 42.62596032537836],
    [79.6407, 27.56802595461914],
    [79.9315, 37.644472320508285],
    [80.2221, 139.08471666851267],
    [80.5124, 25.144235546279905],
    [80.8024, 36.306271005369496],
    [81.0922, 25.0980798853134],
    [81.3818, 40.63730520947132],
    [81.6711, 27.44881416901452],
    [81.9603, 59.577812076414524],
    [82.2492, 92.25895385401746],
    [82.5379, 132.06925390242964],
    [82.8265, 24.711660833684647],
    [83.1148, 25.53662202266227],
    [83.403, 27.10360221958225],
    [83.691, 29.652423137861422],
    [83.9789, 23.53566486625087],
    [84.2666, 30.05786470677312],
    [84.5541, 20.57773362801833],
    [84.8416, 27.927430440510843],
    [85.1289, 25.43719055715833],
    [85.416, 20.141136159411474],
    [85.7031, 23.31069802380958],
    [85.99, 22.532839645166955],
    [86.2769, 20.6003875327905],
    [86.5636, 17.84622540743524],
    [86.8503, 15.801815373692579],
    [87.1369, 16.422141762489897],
    [87.4234, 15.875252222183692],
    [87.7099, 14.929237753594805],
    [87.9962, 13.782081059664321],
    [88.2826, 12.544653940461295],
    [88.5689, 11.363385558907716],
    [88.8552, 10.472269076541693],
    [89.1414, 8.98834768397717],
    [89.4276, 7.825578533517066],
    [89.7138, 6.627856862731721],
    [90., 5.380327703228222],
    [90.2862, 4.0937047055778635],
    [90.5724, 2.7776260060723876],
    [90.8586, 1.4415757180112996],
    [91.1448, 0.21376805897279916],
    [91.4311, 1.327228990512798],
    [91.7174, 2.7042793900851163],
    [92.0038, 4.0918215332910535],
    [92.2901, 5.480373169175907],
    [92.5766, 6.86699362762936],
    [92.8631, 8.246299951705598],
    [93.1497, 9.612958584292759],
    [93.4364, 10.96299965043906],
    [93.7231, 12.288873200067956],
    [94.01, 13.586974902912514],
    [94.8711, 17.340207022920982],
    [94.584, 16.063077419783223],
    [94.2969, 14.845933125263006],
    [95.7334, 20.858925496025037],
    [95.4459, 19.678334204019098],
    [95.1584, 18.506323958177212],
    [96.8852, 23.311575725939264],
    [96.597, 23.406988065350486],
    [96.309, 22.857081740047057],
    [96.0211, 21.943578447741206],
    [97.7508, 28.04976797202689],
    [97.4621, 27.093194112673473],
    [97.1735, 25.46255022788396],
    [98.9078, 29.942644892740713],
    [98.6182, 30.15846668175505],
    [98.3289, 27.711260287072985],
    [98.0397, 27.844465476290946],
    [99.7779, 30.13566945945331],
    [99.4876, 30.469938257601626],
    [99.1976, 29.41628271806084],
    [100.942, 47.40403681330354],
    [100.65, 56.840496952746044],
    [100.359, 39.09942105901899],
    [100.068, 31.237544141067033],
    [101.817, 46.98352381621891],
    [101.525, 27.439044244213637],
    [101.233, 142.39693728692862],
    [102.99, 62.80552057956492],
    [102.696, 30.250464419628134],
    [102.403, 64.12783941038563],
    [102.11, 28.203882941658176],
    [103.872, 24.45009170987815],
    [103.578, 28.745764334030287],
    [103.284, 56.14815555612683],
    [104.758, 47.487214341465226],
    [104.463, 37.44738893053227],
    [104.167, 27.288476782067775],
    [105.946, 42.81683931867057],
    [105.648, 73.97389872223921],
    [105.351, 30.721941070582325],
    [105.055, 44.512570551897994],
    [106.841, 47.44326085048602],
    [106.542, 55.749019372005364],
    [106.243, 34.298156304396414],
    [107.74, 70.28190923033993],
    [107.44, 38.664868000433515],
    [107.14, 55.216962062912685],
    [108.946, 41.41327943127756],
    [108.644, 49.70371882682854],
    [108.342, 44.69812217314874],
    [108.041, 30.204895032001783],
    [109.856, 90.36960676306364],
    [109.552, 31.348443828193727],
    [109.249, 98.4289676236735],
    [110.772, 38.578108784211935],
    [110.466, 52.35793381143262],
    [110.161, 41.46519888981029],
    [111.693, 25.59754938759885],
    [111.385, 64.3025657358637],
    [111.078, 80.90405606705683],
    [112.93, 17.678711128943807],
    [112.62, 42.393423850685366],
    [112.31, 81.41499614883229],
    [112.001, 71.65509509910824],
    [113.866, 48.51600214211444],
    [113.553, 40.19070033495824],
    [113.241, 116.00123972410242],
    [114.808, 97.71714922600678],
    [114.493, 39.97441723357446],
    [114.179, 54.97016849726552],
    [115.758, 120.43835646282125],
    [115.44, 23.402764644373438],
    [115.124, 89.20155516844346],
    [116.076, 27.257716650468527],
    [116.395, 51.44517836544229],
    [116.715, 115.40187137798698],
    [117.036, 153.6978080151301],
    [117.357, 28.80382104352124],
    [117.68, 97.0906695618789],
    [118.004, 51.53728954875977],
    [118.328, 3.7756760070066084],
    [118.654, 67.14061715995115],
    [118.981, 13.71252898260946],
    [119.308, 164.5083555853703],
    [119.637, 16.6745866856939],
    [119.967, 51.02775875851736],
    [120.298, 153.74984265154114],
    [120.63, 52.674463354720515],
    [120.963, 77.55906547192663],
    [121.297, 66.60770785445337],
    [121.633, 118.960343007177],
    [121.97, 126.06894596514381],
    [122.308, 97.27348886334396],
    [122.647, 55.18278973047205],
    [122.987, 61.159030808074995],
    [123.329, 104.16388702432326],
    [123.672, 147.65494836934033],
    [124.017, 146.39035285096816],
    [124.363, 138.06535903872472],
    [124.71, 134.3555836993681],
    [125.059, 139.83979913703436],
    [125.41, 144.4137335196038],
    [125.762, 144.7240434936241],
    [126.115, 78.39712399828363],
    [126.47, 16.77147967274003],
    [126.827, 32.67281024055087],
    [127.185, 33.4872388372461],
    [127.545, 35.55823378088561],
    [127.907, 35.40660952546048],
    [128.271, 35.280116498664334],
    [128.636, 35.131516519595785],
    [129.004, 34.99439532199924],
    [129.373, 34.829637153242444],
    [129.744, 34.67764069769599],
    [130.117, 34.53955870778948],
    [130.493, 34.3642116840548],
    [130.87, 34.20066981438677],
    [131.25, 34.02294594750419],
    [131.631, 33.84941220575299],
    [132.015, 33.671028268942216],
    [132.402, 33.50180163832419],
    [132.791, 33.304246551567424],
    [133.182, 33.12038960854618],
    [133.576, 32.918682072954496],
    [133.972, 32.73283395879123],
    [134.773, 32.324080284552664],
    [134.371, 32.524212162999255],
    [135.995, 31.661809960900328],
    [135.585, 31.881322457074372],
    [135.177, 32.11731838365198],
    [136.825, 31.214317804661036],
    [136.409, 31.449221123385243],
    [137.668, 30.75048333496819],
    [137.245, 30.98388997558581],
    [138.959, 29.996549161729842],
    [138.525, 30.253207213551057],
    [138.095, 30.5079281153938],
    [139.839, 29.497792825129864],
    [139.397, 29.738565937661846],
    [140.735, 28.956274248364778],
    [140.285, 29.21922944455418],
    [141.648, 28.394867500467218],
    [141.189, 28.665326631153526],
    [142.58, 27.799104290321445],
    [142.112, 28.113463720943397],
    [143.533, 27.19649658892829],
    [143.054, 27.50116143289269],
    [144.507, 26.570091501131643],
    [144.017, 26.90616484305414],
    [145.505, 25.926589375106687],
    [145.003, 26.25509190137568],
    [146.529, 25.254427234220163],
    [146.014, 25.58053295614838],
    [147.582, 24.55066577916081],
    [147.052, 24.888531044973536],
    [148.665, 23.812168468388705],
    [148.119, 24.166581309588572],
    [149.784, 23.026497095554546],
    [149.22, 23.42272691180025],
    [150.942, 22.20977764707484],
    [150.358, 22.63340462165309],
    [151.536, 21.806040339641253],
    [152.762, 20.93374165705295],
    [152.143, 21.380311819607716],
    [153.394, 20.47671444084731],
    [154.702, 19.520251032023204],
    [154.04, 20.00508996581508],
    [155.38, 19.03513530516789],
    [156.792, 17.990017094296807],
    [156.076, 18.519078261712203],
    [157.529, 17.44858488677947],
    [158.29, 16.88453743176593],
    [159.894, 15.689040961052076],
    [159.078, 16.29231458316241],
    [160.744, 15.032179204539307],
    [161.632, 14.363109693055508],
    [162.563, 13.665377643611935],
    [163.544, 12.91587552491879],
    [164.587, 12.105736938205606],
    [165.703, 11.250682905410434],
    [166.912, 10.309768253659646],
    [168.243, 9.268761559795683],
    [169.742, 8.095418940391253],
    [171.498, 6.719842354614838],
    [173.723, 4.9716864134596515],
    [177.437, 2.0331217984109426],
]).T
I_degs_eta0, tm_eta0, qslfs_eta0 = np.array([
    [0.001, 5.947209983534138e8, 0.],
    [5.739152391791639, 5.947209779267012e8, 4.180307925193237],
    [8.119787541778727, 5.947209606626213e8, 5.907358636919359],
    [9.948842208679524, 5.947209429798359e8, 7.229431458037059],
    [11.492764201122851, 5.947209248648256e8, 8.341301560786873],
    [12.854714246114726, 5.947209063037329e8, 9.31846016869175],
    [14.087577379503951, 5.947208872822179e8, 10.19964416069988],
    [15.222757034189314, 5.947208677852612e8, 11.007875248251848],
    [16.280706196629584, 5.947208477971015e8, 11.758158612751913],
    [17.275626054366562, 5.947208273010062e8, 12.460920805802923],
    [18.217852472421892, 5.947208062792819e8, 13.123751338542393],
    [19.11518527948294, 5.947207847131673e8, 13.752383965946546],
    [19.97368194424437, 5.947207625829471e8, 14.351268746800509],
    [20.79815791969485, 5.947207398614758e8, 14.923947063900794],
    [21.592516178163095, 5.94720716535899e8, 15.473288545952183],
    [22.35997221533631, 5.947206925765734e8, 16.001656843432006],
    [23.103212397217995, 5.947206679582198e8, 16.511024795435787],
    [23.824508302440524, 5.947206426537898e8, 17.003062164909522],
    [24.525801141008348, 5.947206166341788e8, 17.479193820415198],
    [25.208765296758365, 5.94720589868843e8, 17.940648715996733],
    [25.874856975725653, 5.947205623251073e8, 18.388492343575873],
    [26.525352016609688, 5.947205339683156e8, 18.823658951694274],
    [27.161375675409605, 5.94720504761987e8, 19.24697036988819],
    [27.783926372721044, 5.947204746667665e8, 19.659155571021714],
    [28.393894834968293, 5.947204436416955e8, 20.06086439118452],
    [28.992079676372427, 5.947204116410494e8, 20.45267414680337],
    [29.579200198436176, 5.947203786199867e8, 20.83510703399162],
    [30.155906991013527, 5.947203445272245e8, 21.20863389002762],
    [30.722790779461747, 5.947203093090768e8, 21.57367995033884],
    [31.280389859924888, 5.947202729090353e8, 21.93063139721119],
    [31.8291963886627, 5.947202352646003e8, 22.279837315247402],
    [32.36966173411118, 5.947201963114282e8, 22.621623550196183],
    [32.90220105688909, 5.947201559787887e8, 22.956280138278945],
    [33.42719724961747, 5.947201141914696e8, 23.284078009073994],
    [33.9450043426047, 5.947200708684204e8, 23.605265536870974],
    [34.45595046129533, 5.947200259220636e8, 23.920069466435237],
    [34.96034040552074, 5.947199792583781e8, 24.228702059998042],
    [35.45845790801478, 5.947199307761621e8, 24.531356773856857],
    [35.950567619617786, 5.947198803722489e8, 24.82821510093008],
    [36.436916860523546, 5.947198278969215e8, 25.119441813172948],
    [36.91773717039831, 5.94719773255578e8, 25.4051914273659],
    [37.39324568489336, 5.947197162990185e8, 25.685609439343242],
    [37.86364636173037, 5.947196568690577e8, 25.960826520531132],
    [38.32913107596882, 5.947195947989374e8, 26.23096882361097],
    [38.78988060111423, 5.9471952990535e8, 26.4961490042237],
    [39.24606549027599, 5.94719461987398e8, 26.756474633601602],
    [39.69784686954037, 5.947193908238679e8, 27.01204437159028],
    [40.14537715401228, 5.947193161713487e8, 27.26295429301297],
    [40.588800695540165, 5.947192377602378e8, 27.509285224682802],
    [41.0282543699221, 5.947191552922999e8, 27.751120285550442],
    [41.46386811036118, 5.947190684363779e8, 27.988533556326917],
    [41.89576539306183, 5.947189768217069e8, 28.221593722688056],
    [42.324063680110314, 5.947188800361168e8, 28.45036155895968],
    [42.748874824142504, 5.947187776151401e8, 28.67490055187221],
    [43.17030543875141, 5.947186690359625e8, 28.895262952687098],
    [43.588457238113094, 5.947185537074056e8, 29.11149852306101],
    [44.00342734889962, 5.947184309583751e8, 29.32365598107533],
    [44.415308597192976, 5.947183000193958e8, 29.531774696388425],
    [44.82418977280521, 5.947181600162655e8, 29.735896697307176],
    [45.23015587314137, 5.947180099331095e8, 29.936054902495787],
    [45.63328832850721, 5.94717848595753e8, 30.13228208028853],
    [46.03366521055823, 5.947176746339483e8, 30.324609400038497],
    [46.4313614254062, 5.947174864526684e8, 30.513059351714784],
    [46.82644889274108, 5.94717282077915e8, 30.697655927267192],
    [47.21899671218621, 5.947170593552916e8, 30.878421277323145],
    [47.60907131798174, 5.947168154591998e8, 31.055369145340215],
    [47.99673662298143, 5.947165470990032e8, 31.228519377584345],
    [48.38205415285192, 5.94716250133792e8, 31.3978804551745],
    [48.765083171276935, 5.947159195788462e8, 31.563463713119106],
    [49.145880796892584, 5.947155489092412e8, 31.725278419005157],
    [49.52450211261187, 5.947151299525982e8, 31.88332743313031],
    [49.901000267935174, 5.947146518724064e8, 32.03761655944196],
    [50.27542657478927, 5.947141003096361e8, 32.18814815807273],
    [50.64783059738849, 5.947134552636658e8, 32.334918056633164],
    [51.018260236567635, 5.947126646365485e8, 32.47774658083341],
    [51.386761808997115, 5.947116842987313e8, 32.61659287096621],
    [51.75338012165502, 5.947105504420224e8, 32.7522047568249],
    [52.118158541899035, 5.947092381158011e8, 32.885199287465376],
    [52.48113906345208, 5.947073335088894e8, 33.013691689437955],
    [52.84236236858963, 5.947046270264436e8, 33.13839518464562],
    [53.20186788679278, 5.947018631692127e8, 33.26493115333519],
    [53.55969385010996, 5.945776132072843e8, 33.03229040518269],
    [53.91587734545052, 5.944456961256952e8, 32.835898572735026],
    [54.27045436401599, 5.940445988941413e8, 33.127105029985245],
    [54.623459848058395, 5.926461688470306e8, 34.903988893174706],
    [54.974927735140774, 5.811763353287047e8, 17.07469199918392],
    [55.32489100006137, 5.819334835950763e8, 29.17737814986524],
    [55.67338169459087, 5.723009161129363e8, 17.530482787029708],
    [56.020430985161006, 5.791349447428385e8, 60.525777020819774],
    [56.36606918863253, 5.713107086440885e8, 55.91360725501507],
    [56.71032580626134, 5.539447100496273e8, 28.18240996889668],
    [57.05322955597279, 5.75912990034965e8, 97.52884336930028],
    [57.39480840304664, 5.62701447675307e8, 85.6653096416996],
    [57.735089589307606, 5.3471447416333866e8, 39.51169637991992],
    [58.07409966090999, 5.363009458203898e8, 69.45182003424236],
    [58.411864494798834, 5.186542307460762e8, 41.08544996252985],
    [58.74840932392413, 5.0491337049374896e8, 19.163080715975823],
    [59.083758761279775, 5.092119867633122e8, 66.40119972461629],
    [59.417936822834, 4.915311933677732e8, 39.52562238873623],
    [59.750966949413446, 4.900078072400267e8, 63.319206384387485],
    [60.082872027599365, 4.7206973657869637e8, 28.751206714531587],
    [60.41367440969018, 4.713814337002786e8, 60.26844012726894],
    [60.74339593278159, 4.529640557805427e8, 22.878105954268097],
    [61.07205793701172, 4.7431792428241336e8, 128.3870414967741],
    [61.39968128301621, 4.3873135075122905e8, 42.89215062481565],
    [61.726286368634966, 4.309417758348876e8, 49.01196906935311],
    [62.051893144910245, 4.180374366926803e8, 31.3649928518578],
    [62.3765211314126, 4.3085828206411344e8, 117.96034526480595],
    [62.70018943092969, 4.0006326530044484e8, 32.18647834266463],
    [63.02291674355033, 3.9230144120646065e8, 40.02442881011731],
    [63.34472138017463, 3.800925582266096e8, 15.043854881139861],
    [63.66562127547907, 3.7732969481166476e8, 56.2604509270388],
    [63.985634000363426, 3.8016954471003187e8, 109.24097942115323],
    [64.30477677390552, 3.5456273579909515e8, 23.622204173769383],
    [64.6230664748477, 3.6792823825266784e8, 152.74111510810178],
    [64.94051965263785, 3.383017286350083e8, 32.314861032451695],
    [65.25715253804634, 3.286670915485911e8, 21.020656559880567],
    [65.57298105337951, 3.228775505461911e8, 44.104754403327235],
    [65.88802082230826, 3.1575941540471274e8, 52.79828474421576],
    [66.20228717933053, 3.0377560433738476e8, 17.916599723754445],
    [66.51579517888426, 2.9609943863266176e8, 21.75287682996796],
    [66.82855960412732, 3.005435929040425e8, 131.15182325313646],
    [67.1405949753996, 2.934361521262947e8, 119.27612491313452],
    [67.45191555838184, 2.7486523262220395e8, 44.70597980291993],
    [67.76253537196497, 2.8061982928206223e8, 151.85254679609912],
    [68.07246819584304, 2.5853552266662073e8, 29.40333114771643],
    [68.38172757784186, 2.6238121546277356e8, 143.83401520834963],
    [68.69032684099544, 2.4678797072677305e8, 57.409211316194664],
    [68.99827909038116, 2.3650359134999982e8, 11.859050326820062],
    [69.30559721972423, 2.3048254484635407e8, 27.909124466798037],
    [69.61229391778163, 2.3322958000769627e8, 134.21496098046427],
    [69.91838167451482, 2.2750019476520663e8, 152.98022274940922],
    [70.22387278706077, 2.1316966405236715e8, 57.36512705779562],
    [70.52877936550931, 2.1312395595974523e8, 129.74605590845093],
    [70.83311333849569, 2.0695976719759136e8, 132.22446911097404],
    [71.1368864586156, 1.9265045294878972e8, 22.379923002720925],
    [71.44011030767058, 1.945879055846576e8, 121.03734820441156],
    [71.74279630175052, 1.8230011768272486e8, 42.539591785305234],
    [72.04495569616036, 1.7787114234379452e8, 58.55112367557173],
    [72.3465995901973, 1.767178115750032e8, 115.66637696040476],
    [72.64773893178466, 1.6568698791305286e8, 30.28356415932833],
    [72.94838452196825, 1.6268244314980108e8, 66.30207174990147],
    [73.24854701928112, 1.6100078105921966e8, 112.11357224406227],
    [73.54823694398169, 1.5109183048567784e8, 31.99823486394406],
    [73.84746468217072, 1.531272276680261e8, 156.93831242246878],
    [74.14624048979172, 1.4821545929563686e8, 149.46051627880843],
    [74.44457449651989, 1.387855504949995e8, 57.791460827184416],
    [74.74247670954364, 1.3888354784376034e8, 138.7866572628641],
    [75.03995701724325, 1.2956386358591567e8, 38.03455018181557],
    [75.33702519277091, 1.3085960752985947e8, 150.86508881063438],
    [75.63369089753564, 1.2196086180534102e8, 43.584678881631476],
    [75.92996368459731, 1.1812349278359734e8, 40.17581976700405],
    [76.22585300197328, 1.1806731387474887e8, 118.77387645616056],
    [76.52136819586092, 1.1045106607404321e8, 7.911210766826519],
    [76.81651851377968, 1.0798808838882181e8, 48.847583599623086],
    [77.11131310763565, 1.0483785068549357e8, 51.70237918176262],
    [77.40576103671187, 1.017779005279024e8, 54.01971834713363],
    [77.69987127058711, 9.861416760578085e7, 49.8549271574914],
    [77.99365269198654, 9.503638947860587e7, 19.465347676305523],
    [78.2871140995661, 9.228754491428159e7, 22.096176157134195],
    [78.58026421063414, 8.960466289559361e7, 22.04310993744918],
    [78.87311166381237, 8.786743797613733e7, 59.842298865343054],
    [79.1656650216385, 8.475520461033812e7, 35.426565348996625],
    [79.45793277311338, 8.235082667287323e7, 34.94038811378963],
    [79.74992333619443, 7.983716472669725e7, 19.8799431199984],
    [80.04164506023776, 7.811429915269558e7, 48.84441441891666],
    [80.33310622839124, 7.598333395752595e7, 48.77851838283488],
    [80.62431505994039, 7.401401960130663e7, 52.16357499374904],
    [80.91527971260892, 7.15433262138848e7, 17.539402117693303],
    [81.20600828481639, 7.017816614989813e7, 52.02093231759967],
    [81.49650881789412, 6.804993977791385e7, 31.070348464465024],
    [81.78678929826181, 6.640202044046734e7, 35.15043770668652],
    [82.07685765956607, 6.487279320386027e7, 41.98362963197438],
    [82.36672178478297, 6.322581823986709e7, 34.919712467965226],
    [82.65638950828597, 6.17822850353404e7, 37.50876073174097],
    [82.945868617881, 6.032097265664388e7, 32.60598316230959],
    [83.2351668568101, 5.896263259458715e7, 29.98670187766521],
    [83.52429192572515, 5.8019184410700165e7, 55.50802431786497],
    [83.81325148463333, 5.704247789740697e7, 69.99048363937364],
    [84.10205315481542, 5.5416960479388885e7, 34.765741750606765],
    [84.39070452071866, 5.424236960818603e7, 21.181381147733298],
    [84.67921313182529, 5.3203236844833195e7, 13.573519511128426],
    [84.96758650449817, 5.227164445606617e7, 15.777406759424084],
    [85.25583212380482, 5.139212354945722e7, 16.121287762524382],
    [85.5439574453211, 5.0565225108279064e7, 15.103052521924072],
    [85.83196989691582, 4.98035251681587e7, 16.10656830548287],
    [86.11987688051741, 4.911003536887719e7, 19.921662173009686],
    [86.40768577386386, 4.844361786061127e7, 17.261643009256154],
    [86.69540393223731, 4.7854885889362e7, 20.064745524128497],
    [86.98303869018402, 4.7282070137188464e7, 13.202192484378715],
    [87.2705973632213, 4.6789952698850706e7, 14.108486565245387],
    [87.55808724953235, 4.634292631143994e7, 12.741608381097697],
    [87.84551563164979, 4.594810884459278e7, 11.688440068157863],
    [88.13288977812974, 4.560377357224375e7, 10.501568475445062],
    [88.42021694521657, 4.530678396827822e7, 7.833901911291507],
    [88.70750437850023, 4.506194324865752e7, 6.192538862681967],
    [88.9947593145667, 4.486680441268308e7, 4.670887652761626],
    [89.28198898264274, 4.472087557625024e7, 3.4033583114601123],
    [89.56920060623615, 4.4623684036092475e7, 2.0724151691523356],
    [89.856, 4.457513903981028e7, 0.6966962231614928],
    [90.14359859522781, 4.457508185164418e7, 0.6941059771644447],
    [90.43079939376386, 4.46236149490537e7, 2.0717844881694734],
    [90.71801101735726, 4.4720760156547114e7, 3.402793878747932],
    [91.00524068543331, 4.48666431715738e7, 4.670410020924718],
    [91.29249562149977, 4.506173503357306e7, 6.191721316794212],
    [91.57978305478343, 4.530652890618762e7, 7.833056848686368],
    [91.86711022187028, 4.560349559021263e7, 10.511632970584829],
    [92.1544843683502, 4.594776223458956e7, 11.688879791980193],
    [92.44191275046767, 4.6342529631757654e7, 12.74116305100347],
    [92.7294026367787, 4.6789510950155914e7, 14.109087818168193],
    [93.016961309816, 4.728163528283724e7, 13.221682804843708],
    [93.3045960677627, 4.785169126874147e7, 19.458072771965437],
    [93.59231422613614, 4.844301718120172e7, 17.25918154202666],
    [93.88012311948259, 4.910941527663155e7, 19.926105452055435],
    [94.16803010308418, 4.981444763228375e7, 18.8283972646205],
    [94.4560425546789, 5.056479575218492e7, 15.187222095151654],
    [94.74416787619519, 5.143233607482833e7, 24.013834682199125],
    [95.03241349550184, 5.227083749664004e7, 15.787125679656333],
    [95.32078686817471, 5.320235441630603e7, 13.578633531230956],
    [95.60929547928134, 5.4242274746964134e7, 21.32677332257618],
    [95.89794684518459, 5.551846876440318e7, 44.131412757436834],
    [96.18674851536669, 5.674196515618523e7, 50.75564216292184],
    [96.47570807427486, 5.797223095181861e7, 52.47503568863061],
    [96.7648331431899, 5.888274739396162e7, 20.440965273198817],
    [97.05413138211901, 6.0267055994808875e7, 27.348136673275956],
    [97.34361049171403, 6.170064131199398e7, 30.662194486616738],
    [97.63327821521705, 6.313224250945692e7, 26.612736538301288],
    [97.92314234043394, 6.475039808835e7, 33.148250782506516],
    [98.21321070173819, 6.630121906915019e7, 26.9294819825063],
    [98.50349118210588, 6.806614087524511e7, 32.46072918844905],
    [98.79399171518361, 7.006140776061338e7, 46.013549201755225],
    [99.08472028739108, 7.160844189903314e7, 24.598010198090872],
    [99.37568494005963, 7.38560514611874e7, 44.4874713404335],
    [99.66689377160876, 7.65841447308434e7, 73.09632386408174],
    [99.95835493976224, 7.802048112862001e7, 44.53248918310836],
    [100.25007666380557, 8.021752753614292e7, 43.642764105276505],
    [100.54206722688662, 8.230162371628681e7, 32.31615363464467],
    [100.83433497836151, 8.558828212646472e7, 67.7714532013206],
    [101.12688833618765, 8.705282879599999e7, 24.304121325137213],
    [101.41973578936586, 9.200649985471512e7, 103.39544266426694],
    [101.71288590043392, 9.240757336333057e7, 29.580919994236865],
    [102.00634730801346, 9.536597976646985e7, 37.35432264610821],
    [102.30012872941289, 1.0007082799458677e8, 88.84249524631491],
    [102.59423896328815, 1.0107714990080307e8, 28.645990878933596],
    [102.88868689236435, 1.0512848467163342e8, 59.78751082223454],
    [103.18348148622032, 1.077014397708599e8, 39.854838426924395],
    [103.47863180413908, 1.1073442873224959e8, 27.755492828245764],
    [103.77414699802672, 1.1689575070298645e8, 94.10937099866808],
    [104.0700363154027, 1.2058995652806284e8, 94.50014659545704],
    [104.36630910246437, 1.2225869577407545e8, 51.06272437723758],
    [104.66297480722909, 1.2559834592875779e8, 37.878519362458974],
    [104.96004298275675, 1.2946202651914938e8, 35.1808046380433],
    [105.25752329045638, 1.3293917721744262e8, 7.526556525131987],
    [105.55542550348011, 1.380735744529169e8, 43.011308040770786],
    [105.85375951020828, 1.4148151950242525e8, 10.55801808811103],
    [106.15253531782929, 1.4835465360324815e8, 68.71832589099795],
    [106.45176305601831, 1.5052393064932588e8, 10.046157243515664],
    [106.7514529807189, 1.6179211058566552e8, 128.5661168949003],
    [107.05161547803175, 1.6097842697209615e8, 37.517465819088216],
    [107.35226106821536, 1.6561619924705887e8, 28.594838182876337],
    [107.6534004098027, 1.7899763378004146e8, 165.43668024241558],
    [107.95504430383966, 1.7601936014238414e8, 26.35506553735254],
    [108.2572036982495, 1.8224160102731162e8, 41.90664087067373],
    [108.55988969232942, 1.8710467937918767e8, 27.420131380435183],
    [108.86311354138441, 2.0135619922752416e8, 141.70620608579193],
    [109.16688666150431, 2.080482626025125e8, 153.81153754085173],
    [109.47122063449069, 2.0499161745093933e8, 30.861767006265293],
    [109.77612721293924, 2.1064040971329832e8, 20.6950042854237],
    [110.08161832548518, 2.177846588866342e8, 35.002619777124686],
    [110.38770608221837, 2.233352460860657e8, 17.735500020276923],
    [110.69440278027577, 2.310677385231358e8, 37.441120309347355],
    [111.00172090961884, 2.369079800107951e8, 21.70122089142567],
    [111.30967315900457, 2.507719673833023e8, 91.97165577018656],
    [111.61827242215816, 2.5519693129135382e8, 67.38231736522637],
    [111.92753180415696, 2.5834777523280534e8, 27.18155748156017],
    [112.23746462803504, 2.658530063976565e8, 28.37709230389759],
    [112.54808444161817, 2.7460006784995955e8, 42.583828841183305],
    [112.8594050246004, 2.823528189225496e8, 42.806374866672776],
    [113.17144039587268, 2.8905592210638916e8, 32.05822342355202],
    [113.48420482111574, 2.9690566809861803e8, 31.565864544895486],
    [113.79771282066947, 3.0415124326117396e8, 23.100529526128568],
    [114.11197917769175, 3.139447524739426e8, 39.266524422815145],
    [114.42701894662049, 3.34757805804003e8, 142.12840972884854],
    [114.74284746195366, 3.442088617426059e8, 156.88192114139017],
    [115.05948034736217, 3.5294752168703794e8, 155.67042112657617],
    [115.37693352515231, 3.530911928298382e8, 69.17301130912702],
    [115.69522322609448, 3.5537343218478674e8, 31.007294260535744],
    [116.01436599963657, 3.7797251889911175e8, 99.46827878283622],
    [116.33437872452095, 3.82337394332146e8, 78.41242326402045],
    [116.65527861982538, 3.8158190496065444e8, 28.780842682230105],
    [116.97708325644967, 3.9293336963011885e8, 43.68777425561215],
    [117.2998105690703, 4.00394791660021e8, 34.09613369247367],
    [117.6234788685874, 4.2458366783562607e8, 134.82037442669503],
    [117.94810685508976, 4.1754285776662934e8, 28.049676439483022],
    [118.27371363136504, 4.281817804987506e8, 36.86582961515464],
    [118.60031871698381, 4.399928015196707e8, 48.37651431101229],
    [118.92794206298828, 4.493247564225381e8, 48.413793631694254],
    [119.25660406721842, 4.5118185438960904e8, 5.422921506112712],
    [119.58632559030981, 4.830279395549843e8, 93.63520586338745],
    [119.91712797240064, 4.7144731428413165e8, 25.567879352609843],
    [120.24903305058656, 4.991977716778813e8, 157.80229052105193],
    [120.58206317716602, 4.918330830139954e8, 37.12237903048791],
    [120.91624123872023, 4.985161647107502e8, 27.961148828549707],
    [121.25159067607586, 5.064404712314626e8, 25.607692582245488],
    [121.5881355052012, 5.170744996027867e8, 33.86273700011937],
    [121.92590033908999, 5.377139996644989e8, 66.94961440772447],
    [122.26491041069241, 5.679542811585463e8, 107.20783863454191],
    [122.60519159695338, 5.371276627572821e8, 17.706781677270023],
    [122.9467704440272, 5.661321288639816e8, 71.30099515568514],
    [123.28967419373868, 5.797758718970319e8, 88.8432297992431],
    [123.63393081136748, 5.821427910279372e8, 80.34931328373632],
    [123.97956901483899, 5.690174792371827e8, 22.710515872177044],
    [124.32661830540914, 5.875495198461446e8, 48.46095582604828],
    [124.67510899993863, 5.860395274857913e8, 79.05244234028132],
    [125.02507226485923, 5.87817387794428e8, 70.36973676430615],
    [125.37654015194161, 5.85430295787352e8, 17.505750243771853],
    [125.72954563598402, 5.911816614176219e8, 27.406404402494623],
    [126.08412265454949, 5.941503832174568e8, 32.13206790638759],
    [126.44030614989003, 5.942301819401419e8, 31.902751931204705],
    [126.79813211320723, 5.947006644860854e8, 33.25815160298919],
    [127.15763763141038, 5.947046819588431e8, 33.141858780456424],
    [127.51886093654791, 5.947075863774478e8, 33.0187003024007],
    [127.88184145810098, 5.94709140316512e8, 32.88740791320498],
    [128.24661987834497, 5.947099404023036e8, 32.75045138325568],
    [128.6132381910029, 5.947108276589279e8, 32.613007746049234],
    [128.9817397634324, 5.947122662310086e8, 32.47766563407032],
    [129.3521694026115, 5.947131019879881e8, 32.335186375205964],
    [129.72457342521074, 5.947137455634986e8, 32.18841894577256],
    [130.0989997320648, 5.947142958931612e8, 32.03789244321914],
    [130.47549788738814, 5.947142958931612e8, 31.883598890470218],
    [130.85411920310742, 5.947142958931612e8, 31.72554861581998],
    [131.23491682872307, 5.947142958931612e8, 31.563733853983887],
    [131.61794584714806, 5.947142958931612e8, 31.398149545504022],
    [132.00326337701858, 5.947142958931612e8, 31.228787551990617],
    [132.39092868201826, 5.947142958931612e8, 31.055636052607444],
    [132.7810032878138, 5.947142958931612e8, 30.878686864327637],
    [133.17355110725893, 5.947142958931612e8, 30.697919966210378],
    [133.56863857459382, 5.947142958931612e8, 30.513322232347143],
    [133.9663347894418, 5.947142958931612e8, 30.324871652643093],
    [134.3667116714928, 5.947142958931612e8, 30.132543021926473],
    [134.76984412685866, 5.947142958931612e8, 29.936315082974293],
    [135.1758102271948, 5.947142958931612e8, 29.736155501631366],
    [135.58469140280704, 5.947142958931612e8, 29.53203212662375],
    [135.99657265110037, 5.947142958931612e8, 29.32391101881546],
    [136.41154276188692, 5.947142958931612e8, 29.11175308161948],
    [136.8296945612486, 5.947142958931612e8, 28.89551607326866],
    [137.2511251758575, 5.947142958931612e8, 28.67515218283941],
    [137.6759363198897, 5.947142958931612e8, 28.450611122241693],
    [138.10423460693818, 5.947142958931612e8, 28.221841468273386],
    [138.53613188963882, 5.947142958931612e8, 27.988779349673376],
    [138.97174563007792, 5.947142958931612e8, 27.751364708505893],
    [139.41119930445984, 5.947142958931612e8, 27.509527595417843],
    [139.8546228459877, 5.947142958931612e8, 27.263194847734244],
    [140.30215313045966, 5.947142958931612e8, 27.012283818679578],
    [140.75393450972402, 5.947142958931612e8, 26.756711971323526],
    [141.21011939888578, 5.947142958931612e8, 26.496383961147924],
    [141.6708689240312, 5.947142958931612e8, 26.231201998600977],
    [142.13635363826964, 5.947142958931612e8, 25.961058197537174],
    [142.60675431510663, 5.947142958931612e8, 25.6858378821704],
    [143.08226282960172, 5.947142958931612e8, 25.40541873686149],
    [143.56308313947645, 5.947142958931612e8, 25.119666856201338],
    [144.04943238038223, 5.947142958931612e8, 24.828437842306105],
    [144.54154209198524, 5.947142958931612e8, 24.5315772621939],
    [145.03965959447928, 5.947142958931612e8, 24.228919107522103],
    [145.54404953870468, 5.947142958931612e8, 23.92028508188276],
    [146.05499565739532, 5.947142958931612e8, 23.605477727939192],
    [146.57280275038255, 5.947142958931612e8, 23.284287388272276],
    [147.09779894311092, 5.947142958931612e8, 22.956486879626823],
    [147.6303382658888, 5.947142958931612e8, 22.621828148945838],
    [148.1708036113373, 5.947142958931612e8, 22.28003941815725],
    [148.71961014007513, 5.947142958931612e8, 21.930830003189367],
    [149.27720922053825, 5.947142958931612e8, 21.57387539829815],
    [149.84409300898648, 5.947142958931612e8, 21.208826723125455],
    [150.42079980156385, 5.947142958931612e8, 20.835296647150507],
    [151.0079203236276, 5.947142958931612e8, 20.45286006967134],
    [151.60610516503172, 5.947142958931612e8, 20.061047669270078],
    [152.21607362727897, 5.947142958931612e8, 19.659335171009282],
    [152.8386243245904, 5.947142958931612e8, 19.247147042694206],
    [153.4746479833903, 5.947142958931612e8, 18.82383139098957],
    [154.12514302427437, 5.947142958931612e8, 18.388660843937984],
    [154.79123470324163, 5.947142958931612e8, 17.940813626666518],
    [155.47419885899168, 5.947142958931612e8, 17.47935520081792],
    [156.1754916975595, 5.947142958931612e8, 17.003218464724682],
    [156.896787602782, 5.947142958931612e8, 16.51117757024515],
    [157.6400277846637, 5.947142958931612e8, 16.001804256764594],
    [158.40748382183693, 5.947142958931612e8, 15.47343130982538],
    [159.20184208030517, 5.947142958931612e8, 14.924085041101192],
    [160.02631805575564, 5.947142958931612e8, 14.351401433511324],
    [160.88481472051708, 5.947142958931612e8, 13.752511451828267],
    [161.78214752757813, 5.947142958931612e8, 13.123873817089729],
    [162.72437394563346, 5.947142958931612e8, 12.461036421590537],
    [163.71929380337042, 5.947142958931612e8, 11.758268494900852],
    [164.77724296581067, 5.947142958931612e8, 11.007978317002937],
    [165.91242262049607, 5.947142958931612e8, 10.199739585821762],
    [167.1452857538853, 5.947142958931612e8, 9.318547496607154],
    [168.50723579887716, 5.947142958931612e8, 8.341380015708927],
    [170.0511577913205, 5.947142958931612e8, 7.229499355479811],
    [171.88021245822128, 5.947142958931612e8, 5.907413989824357],
    [174.26084760820837, 5.947142958931612e8, 4.180347367958526],
    [179.9, 5.947142958931612e8, 0.07292436029590021],
]).T

def get_I1(I0d, eta):
    ''' given total inclination between Lout and L, returns I_tot '''
    I0 = np.radians(I0d)
    def I2_constr(_I2):
        return np.sin(_I2) - eta * np.sin(I0 - _I2)
    I2 = brenth(I2_constr, 0, np.pi, xtol=1e-12)
    return np.degrees(I0 - I2)

# by convention, use solar masses, AU, and set c = 1, in which case G = 9.87e-9
G = 9.87e-9
def get_eps(*params):
    m1, m2, m3, a0, a2, e2 = params
    m12 = m1 + m2
    mu = m1 * m2 / m12
    n = np.sqrt(G * m12 / a0**3)
    eps_gw = (1 / n) * (m12 / m3) * (a2**3 / a0**7) * G**3 * mu * m12**2
    eps_gr = (m12 / m3) * (a2**3 / a0**4) * (1 - e2**2)**(3/2) * 3 * G * m12
    eps_sl = (m12 / m3) * (a2**3 / a0**4) * (1 - e2**2)**(3/2) * (
        3 * G * (m2 + mu / 3) / 2)
    L1 = mu * np.sqrt(G * (m12) * a0)
    L2 = m3 * m12 / (m3 + m12) * np.sqrt(G * (m3 + m12) * a2)
    eta = L1 / L2
    return {'eps_gw': eps_gw, 'eps_gr': eps_gr, 'eps_sl': eps_sl,
            'eta': eta}

def get_Ilimd(eta=0, eps_gr=0, **kwargs):
    def jlim_criterion(j): # eq 44, satisfied when j = jlim
        return (
            3/8 * (j**2 - 1) * (
                - 3 + eta**2 / 4 * (4 * j**2 / 5 - 1))
            + eps_gr * (1 - 1 / j))
    jlim = brenth(jlim_criterion, 1e-15, 1 - 1e-15)
    Ilim = np.arccos(eta / 2 * (4 * jlim**2 / 5 - 1))
    Ilimd = np.degrees(Ilim)
    return Ilimd

def get_dydt(eps_gw=0, eps_gr=0, eps_sl=0, eta=0, e2=0):
    def dydt(t, y):
        '''
        dydt for all useful of 10 orbital elements + spin, eps_oct = 0 in LML15.
        eta = L / Lout
        '''
        a1, e1, W, I1, w1, I2, *svecs = y
        Itot = I1 + I2
        x1 = 1 - e1**2

        # orbital evolution
        da1dt =  (
            -eps_gw * (64 * (1 + 73 * e1**2 / 24 + 37 * e1**4 / 96)) / (
                5 * a1**3 * x1**(7/2))
        )
        de1dt = (
            15 * a1**(3/2) * e1 * np.sqrt(x1) * np.sin(2 * w1)
                    * np.sin(Itot)**2 / 8
                - eps_gw * 304 * e1 * (1 + 121 * e1**2 / 304)
                    / (15 * a1**4 * x1**(5/2))
        )
        dWdt = (
            -3 * a1**(3/2) / (np.sin(I1) * 32 * np.sqrt(x1)) * (
                2 * (2 + 3 * e1**2 - 5 * e1**2 * np.cos(2 * w1))
                * np.sin(2 * Itot))
        )
        dI1dt = (
            -15 * a1**(3/2) * e1**2 * np.sin(2 * w1)
                * np.sin(2 * Itot) / (16 * np.sqrt(x1))
        )
        dI2dt = eta * a1**(1/2) * (
            -15 * a1**(3/2) * e1**2 * np.sin(2 * w1) * np.sin(Itot) / 8
        )
        dw1dt = (
            3 * a1**(3/2) * (
                (4 * np.cos(Itot)**2 +
                 (5 * np.cos(2 * w1) - 1) * (1 - e1**2 - np.cos(Itot)**2))
                  / (8 * np.sqrt(x1))
                + eta * a1**(1/2) * np.cos(Itot) * (
                    2 + e1**2 * (3 - 5 * np.cos(2 * w1))) / 8
            )
            + eps_gr / (a1**(5/2) * x1)
        )

        # spin evolution
        Lhat = [np.sin(I1) * np.cos(W), np.sin(I1) * np.sin(W), np.cos(I1)]
        dsdt = np.zeros_like(svecs)
        for i in range(len(svecs) // 3):
            dsdt[3 * i: 3 * (i + 1)] = eps_sl *\
                np.cross(Lhat, svecs[3 * i: 3 * (i + 1)]) / (a1**(5/2) * x1)
        ret = [da1dt, de1dt, dWdt, dI1dt, dw1dt, dI2dt, *dsdt]
        return ret
    return dydt

def get_qslf_for_I0(I0, tf=np.inf, plot=False, tol=1e-9, params=params):
    print('Running for', np.degrees(I0), tf)
    af = 5e-3
    getter_kwargs = get_eps(*params)
    # getter_kwargs['eta'] = 0
    # getter_kwargs['eps_gw'] = 0
    # getter_kwargs['eps_gr'] = 0
    dydt = get_dydt(**getter_kwargs)

    # a1, e1, W, I1, w1, I2, sx, sy, sz = y
    I1 = np.radians(get_I1(np.degrees(I0), getter_kwargs['eta']))
    I2 = I0 - I1
    s0 = [np.sin(I1), 0, np.cos(I1)] # initial alignment
    y0 = [1, 1e-3, 0, I1, 0, I2, *s0]

    a_term_event = lambda t, y: y[0] - af
    a_term_event.terminal = True
    ret = solve_ivp(dydt, (0, tf), y0, events=[a_term_event],
                    method='BDF', atol=tol, rtol=tol)

    _, _, W_arr, I_arr, _, _, *s_arr = ret.y
    Lhat_arr = [np.sin(I_arr) * np.cos(W_arr),
                np.sin(I_arr) * np.sin(W_arr),
                np.cos(I_arr)]
    qslfd = np.degrees(np.arccos(ts_dot(Lhat_arr, s_arr)))
    print('Ran for', np.degrees(I0), qslfd[0], qslfd[-1])

    if plot:
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(8, 8), sharex=True)
        ax1.semilogy(ret.t, ret.y[0], 'k', alpha=0.7, lw=0.7)
        ax2.semilogy(ret.t, 1 - ret.y[1], 'k', alpha=0.7, lw=0.7)
        print(ret.y[1,0], np.degrees(ret.y[3,0]), np.max(ret.y[1]), np.max(np.degrees(ret.y[3])))
        ax3.plot(ret.t, np.degrees(ret.y[3]), 'k', alpha=0.7, lw=0.7)
        ax4.plot(ret.t, qslfd, 'k', alpha=0.7, lw=0.7)
        plt.savefig('/tmp/8sim', dpi=400)
        plt.close()

    return qslfd[-1], ret.t[-1]

# n2 is fixed: n2 \propto eta * j1 * x1 + j2, e2=0
def get_dydt_vec(eps_gw=0, eps_gr=0, eps_sl=0, eta=0, **kwargs):
    def dydt(t, y):
        '''
        dydt for all useful of 10 orbital elements + spin, eps_oct = 0 in LML15.
        eta = L / Lout
        '''
        a, j1, e1, j2, s = y[0], y[1:4], y[4:7], y[7:10], y[10:13]
        e1s = np.sqrt(np.sum(e1**2)) # scalar
        x1 = 1 - e1s**2
        x2 = 1
        l1hat = j1 / np.sqrt(x1)
        n2 = j2 # e2 = 0

        # orbital evolution
        dadt = (
            -eps_gw * (64 * (1 + 73 * e1s**2 / 24 + 37 * e1s**4 / 96)) / (
                5 * a**3 * x1**(7/2))
        )
        dj1dt = 3 * a**(3/2) / 4 * (
            np.dot(j1, n2) * np.cross(j1, n2)
            - 5 * np.dot(e1, n2) * np.cross(e1, n2)
        )
        de1dt_lk = 3 * a**(3/2) / 4 * (
            np.dot(j1, n2) * np.cross(e1, n2)
            - 5 * np.dot(e1, n2) * np.cross(j1, n2)
            + 2 * np.cross(j1, e1)
        )
        de1dt_gw = -(
            eps_gw * (304 / 15) * (1 + 121 / 304 * e1s**2) /
            (a**4 * x1**(5/2))
        ) * e1
        de1dt_gr = eps_gr * np.cross(l1hat, e1) / (x1 * a**(5/2))
        de1dt = de1dt_lk + de1dt_gw + de1dt_gr
        dj2dt = eta * 3 * a**(3/2) / 4 * (
            np.dot(j1, n2) * np.cross(n2, j1)
            - 5 * np.dot(e1, n2) * np.cross(n2, e1)
        )
        dsdt = eps_sl * np.cross(l1hat, s) / (a**(5/2) * x1)
        ret = [dadt, *dj1dt, *de1dt, *dj2dt, *dsdt]
        return ret
    return dydt

def get_qslf_for_I0_vec(I0, tf=np.inf, plot=False, tol=1e-9, params=params):
    print('Running vec for', np.degrees(I0), tf)
    af = 5e-3
    W0 = 0
    w0 = 0 # I don't actually support anything more general than w0=0 lol
    e0s = 1e-3
    getter_kwargs = get_eps(*params)
    # getter_kwargs['eta'] = 0
    # getter_kwargs['eps_gw'] = 0
    # getter_kwargs['eps_gr'] = 0
    eta = getter_kwargs['eta']

    I1 = np.radians(get_I1(np.degrees(I0), getter_kwargs['eta']))
    I2 = I0 - I1
    s0 = np.array([np.sin(I1), 0, np.cos(I1)]) # initial alignment
    j1 = np.sqrt(1 - e0s**2) * s0
    e1 = np.array([0, e0s, 0])
    j2 = np.array([-np.sin(I2), 0, np.cos(I2)])
    y0 = [1, *j1, *e1, *j2, *s0]

    dydt = get_dydt_vec(**getter_kwargs)

    a_term_event = lambda t, y: y[0] - af
    a_term_event.terminal = True
    ret = solve_ivp(dydt, (0, tf), y0, events=[a_term_event],
                    method='BDF', atol=tol, rtol=tol)

    a, j1, e1, s = ret.y[0], ret.y[1:4], ret.y[4:7], ret.y[10:13]
    l1hat = j1 / np.sqrt(np.sum(j1**2, axis=0))
    qslfd = np.degrees(np.arccos(ts_dot(l1hat, s)))
    e1s = np.sqrt(np.sum(e1**2, axis=0))
    I1 = np.arccos(l1hat[2])
    print('Ran for', np.degrees(I0), qslfd[0], qslfd[-1])

    if plot:
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(8, 8), sharex=True)
        print(e1s[0], np.degrees(I1[0]), np.max(e1s), np.max(np.degrees(I1)))
        ax1.semilogy(ret.t, a, 'k', alpha=0.7, lw=0.7)
        ax2.semilogy(ret.t, 1 - e1s, 'k', alpha=0.7, lw=0.7)
        ax3.plot(ret.t, np.degrees(I1), 'k', alpha=0.7, lw=0.7)
        ax4.plot(ret.t, qslfd, 'k', alpha=0.7, lw=0.7)
        plt.savefig('/tmp/8vecsim', dpi=400)
        plt.close()

    return qslfd[-1], ret.t[-1]

def get_qeff0(I0, params, tol=1e-10, e0=1e-3):
    print('Running for', np.degrees(I0))
    tf = 20
    getter_kwargs = get_eps(*params)
    # getter_kwargs['eta'] = 0
    getter_kwargs['eps_gw'] = 0
    dydt = get_dydt(**getter_kwargs)
    Ilimd = get_Ilimd(**getter_kwargs)

    other_svecs = [1, 0, 0, 0, 1, 0, 0, 0, 1] # for monodromy
    # s0 = [np.sin(I0), 0, np.cos(I0)] # initial alignment
    # y0 = [1, e0, 0, I0, 0, 0, *s0, *other_svecs]
    I1 = np.radians(get_I1(np.degrees(I0), getter_kwargs['eta']))
    I2 = I0 - I1
    s0 = [np.sin(I1), 0, np.cos(I1)] # initial alignment
    y0 = [1, e0, 0, I1, 0, I2, *s0, *other_svecs]

    period_event = lambda t, y: y[4] - np.pi
    period_event.terminal = True
    ret = solve_ivp(dydt, (0, tf), y0, events=[period_event],
                    method='BDF', atol=tol, rtol=tol, dense_output=True)
    t = ret.t
    a1, e1, W, I1, w1, I2, *svecs = ret.y
    svec = np.array(svecs[ :3])

    # calculate monodromy matrix in corotating frame (rotate by -W[-1] * zhat)
    Wf = W[-1]
    rot_mat = np.array([
        [np.cos(Wf), -np.sin(Wf), 0],
        [np.sin(Wf), np.cos(Wf), 0],
        [0, 0, 1]])
    svecs_f = np.array(svecs)[3: , -1]
    mono_mat = np.matmul(np.reshape(svecs_f, (3, 3)), rot_mat)
    # NB: in corotating frame, svec[:,-1] = np.dot(mono_mat.T, svec[:,0])
    eigs, eigv = np.linalg.eig(mono_mat.T)
    one_eig_idx = np.where(abs(np.imag(eigs)) < 1e-8)[0][0]
    mono_eig = np.real(eigv[:, one_eig_idx])
    Im = np.arccos(mono_eig[2])

    Iall = I1 + I2
    Itot = [get_I1(_I1, getter_kwargs['eta']) for _I1 in I1]
    x1 = 1 - e1**2
    dWdt = (
        3 * a1**(3/2) * np.sin(2 * Iall) / np.sin(I1) *
                (5 * e1**2 * np.cos(w1)**2 - 4 * e1**2 - 1)
            / (8 * np.sqrt(x1))
    )
    Jvec = np.array([0, 1])
    dWdt_mean = np.array([
        np.sum(dWdt * Jvec[0] * np.gradient(t)) / t[-1],
        0,
        np.sum(dWdt * Jvec[1] * np.gradient(t)) / t[-1]])

    dWslx = getter_kwargs['eps_sl'] * np.sin(I1) / (a1**(5/2) * x1)
    dWslz = getter_kwargs['eps_sl'] * np.cos(I1) / (a1**(5/2) * x1)
    dWslx_mean = np.sum(dWslx * np.gradient(t)) / t[-1]
    dWslz_mean = np.sum(dWslz * np.gradient(t)) / t[-1]

    dWsl_vec = np.array([
        dWslx,
        np.zeros_like(dWslx),
        dWslz,
    ])
    dWdt_vec = np.outer(np.array([0, 0, 1]), dWdt)
    Weff_vec_t = dWsl_vec - dWdt_vec
    dWsl_mean = np.sum(dWsl_vec * np.gradient(t) / t[-1], axis=1)
    dWdt_mean = np.sum(dWdt_vec * np.gradient(t) / t[-1], axis=1)
    _Weff_vec = np.sum(Weff_vec_t * np.gradient(t) / t[-1], axis=1)

    Weffmag = np.sqrt(np.sum(_Weff_vec**2))
    Weff_vec = _Weff_vec / Weffmag
    # |A|
    A = np.sqrt(np.sum(dWsl_mean**2)) / np.sqrt(np.sum(dWdt_mean**2))

    # analytic check
    # sign = 1 if np.degrees(I0) < Ilimd else -1
    # I2_anal = np.arctan2(Jvec[0], Jvec[1])
    # I1_anal = I0 - I2_anal # indeed equals I1_anal from my func
    # I_e_tot = np.arctan2(sign * A * np.sin(I1_anal),
    #                      (1 + sign * A * np.cos(I1_anal)))
    # I_e_out = np.arctan2(Weff_vec[0], Weff_vec[2]) + (
    #     0 if sign == 1 else np.pi)
    # print(np.degrees(I_e_out), np.degrees(I_e_tot + I2_anal))

    qeff0 = np.arccos(np.dot(Weff_vec, s0))

    # my best qeff estimator: <We> dot <svec>
    # seems like qeff0 is sufficient
    dWdt_inertial = np.outer([Jvec[0], 0, Jvec[1]], dWdt)
    Wsl_inertial = np.outer(
        np.ones(3),
        getter_kwargs['eps_sl'] / (a1**(5/2) * x1)
    ) * np.array([
        np.sin(I1) * np.cos(W),
        np.sin(I1) * np.sin(W),
        np.cos(I1),
    ])
    Weffvec_inertial = np.sum(
        (Wsl_inertial - dWdt_inertial) * np.gradient(t) / t[-1], axis=1)
    Weffvec_inertial /= np.sqrt(np.sum(Weffvec_inertial**2))
    qeff_est = np.arccos(np.dot(Weffvec_inertial, np.mean(svec, axis=1)))

    Ie = np.arctan2(Weff_vec[0], Weff_vec[2])
    ratio = Weffmag * t[-1] / (2 * np.pi)

    # Weff harmonics
    t_vals = np.linspace(t[0], t[-1], 4 * len(t))
    Weffx_interp = interp1d(t, Weff_vec_t[0])(t_vals)
    Weffz_interp = interp1d(t, Weff_vec_t[2])(t_vals)
    x_coeffs = dct(Weffx_interp, type=1)[::2] / (2 * len(t_vals))
    z_coeffs = dct(Weffz_interp, type=1)[::2] / (2 * len(t_vals))
    Ie1 = np.arctan2(x_coeffs[1], z_coeffs[1])
    ratio1 = np.sqrt(x_coeffs[1]**2 + z_coeffs[1]**2) * t[-1] / (2 * np.pi)
    Ie2 = np.arctan2(x_coeffs[2], z_coeffs[2])
    ratio2 = np.sqrt(x_coeffs[2]**2 + z_coeffs[2]**2) * t[-1] / (2 * np.pi)

    print(A, np.degrees(Ie), np.degrees(qeff0), np.degrees(Im), ratio)
    return A, Ie, qeff0, qeff_est, Im, ratio, Ie1, ratio1, Ie2, ratio2

def qslfs_run(npts=200):
    getter_kwargs = get_eps(*params)
    # getter_kwargs['eta'] = 0
    Ilimd = get_Ilimd(**getter_kwargs)

    pkl_fn = '8finite_qslfs.pkl'
    if not os.path.exists(pkl_fn):
        print('Running %s' % pkl_fn)

        incs1 = np.radians(np.linspace(Ilimd + 0.5, Ilimd, npts))
        incs2 = np.radians(
            np.linspace(Ilimd - 0.5, Ilimd, npts - 1, endpoint=False)
        )
        incs = np.array(list(zip(incs1, incs2))).flatten()
        with Pool(64) as p:
            dat = p.map(get_qslf_for_I0, incs)
        qslfds, t_merges = np.array(dat).T
        with open(pkl_fn, 'wb') as f:
            pickle.dump((incs, qslfds, t_merges), f)
    else:
        with open(pkl_fn, 'rb') as f:
            print('Loading %s' % pkl_fn)
            incs, qslfds, t_merges = pickle.load(f)
    sort_idx = np.argsort(incs)
    I_degs = np.degrees(incs)[sort_idx]
    tf = t_merges[sort_idx]
    qslfd_arr = qslfds[sort_idx]

    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6, 6), sharex=True,
                                   gridspec_kw={'height_ratios': [1, 2]})
    t_lk, _, _, _ = get_vals(*params, np.radians(90.5))
    ax1.plot(I_degs, tf * t_lk, 'b', lw=1.5)
    ax1.set_yscale('log')
    ax1.set_ylabel('Merger Time (yr)')
    ax1.set_yticks([1e6, 1e8, 1e10])
    ax1.set_yticklabels([r'$10^{6}$', r'$10^{8}$', r'$10^{10}$'])

    ax2.plot(I_degs, qslfd_arr, 'b', lw=1.5)
    ax2.set_xlabel(r'$I_{\rm i}$ (Deg)')
    ax2.set_ylabel(r'$\theta_{\rm sl, f}$ (Deg)')
    ax2.set_yticks([0, 30, 60, 90])
    ax2.set_yticklabels([r'$0$', r'$30$', r'$60$', r'$90$'])
    Icrit = I_degs[np.argmin(qslfd_arr)]
    print(Icrit, Ilimd)
    ax1.axvline(Icrit, c='k', lw=0.7)
    ax2.axvline(Icrit, c='k', lw=0.7)

    I_left = I_degs[np.where(I_degs < Icrit)[0]]
    I_right = I_degs[np.where(I_degs > Icrit)[0]]
    I_leftlim = np.degrees(get_qeff0(np.radians(I_degs.min()), params)[2])
    I_rightlim = np.degrees(get_qeff0(np.radians(I_degs.max()), params)[2])
    ax2.plot(I_left,
             I_leftlim
                - (cosd(90.3)**2 / cosd(I_left - Icrit + 90)**2)**(37/16),
             'k:', lw=1, alpha=0.7)
    ax2.plot(I_left,
             I_leftlim
                + (cosd(90.3)**2 / cosd(I_left - Icrit + 90)**2)**(37/16),
             'k:', lw=1, alpha=0.7)
    ax2.plot(I_right,
             I_rightlim
                - (cosd(90.3)**2 / cosd(I_right - Icrit + 90)**2)**(37/16),
             'k:', lw=1, alpha=0.7)
    ax2.plot(I_right,
             I_rightlim
                + (cosd(90.3)**2 / cosd(I_right - Icrit + 90)**2)**(37/16),
             'k:', lw=1, alpha=0.7)
    ax2.set_ylim(bottom=0, top=120)

    ax2.plot(I_left, np.full_like(I_left, I_leftlim), 'k', lw=1, alpha=0.7)
    ax2.plot(I_right, np.full_like(I_right, I_rightlim), 'k', lw=1, alpha=0.7)

    plt.tight_layout()
    fig.subplots_adjust(hspace=0.03)
    plt.savefig('8finite_qslfs.png', dpi=400)
    plt.close()

def bin_comp(I_degs, qslfs, params, e0=1e-3, fn='8bin_comp', tm=None):
    ''' plot Fig 4 of LL 17 w/ updated trend line '''
    getter_kwargs = get_eps(*params)
    Ilimd = get_Ilimd(**getter_kwargs)
    I_d = np.linspace(I_degs.min(), I_degs.max(), 2000)

    pkl_fn = fn + '.pkl'
    if not os.path.exists(pkl_fn):
        print('Running %s' % pkl_fn)
        rets = []
        for I_val in I_d:
            ret = get_qeff0(np.radians(I_val), params, e0=e0)
            rets.append(ret)
        with open(pkl_fn, 'wb') as f:
            pickle.dump(np.array(rets).T, f)
        rets = np.array(rets).T
    else:
        with open(pkl_fn, 'rb') as f:
            print('Loading %s' % pkl_fn)
            rets = pickle.load(f)
    As, Ies, qeis, barqeis, Ims, ratios, Ie1s, ratio1s, Ie2s, ratio2s = rets
    fig, (ax2, ax3) = plt.subplots(2, 1, figsize=(6, 8), sharex=True,
                                   gridspec_kw={'height_ratios':[1, 2]})
    # convention: Im is in [0, 90] or [90, 180] with Ies
    corrected_Ims = []
    for Im, Ie in zip(Ims, Ies):
        if Ie < np.pi / 2 and Ie > 0:
            if Im < np.pi / 2 and Im > 0:
                corrected_Ims.append(Im)
            elif Im > np.pi / 2 and Im < np.pi:
                corrected_Ims.append(np.pi - Im)
        elif Ie > np.pi / 2 and Ie < np.pi:
            if Im < np.pi / 2 and Im > 0:
                corrected_Ims.append(np.pi - Im)
            elif Im > np.pi / 2 and Im < np.pi:
                corrected_Ims.append(Im)
    assert len(corrected_Ims) == len(Ims)
    Ims = np.array(corrected_Ims)
    Ies = np.array(Ies)
    delta_Im = np.degrees(Ims - Ies)

    ax2.plot(I_d, ratios, 'k', lw=1)
    ax2.set_ylabel(r'$\bar{\Omega}_{\rm e} / \Omega_{\rm LK}$')
    ax2.axhline(1, c='k', lw=0.7, alpha=0.7, ls=':')
    ax2.axhline(2, c='k', lw=0.7, alpha=0.7, ls=':')

    # angle between averaged rotation axis and true monodromy eigenvector
    ax3.plot(I_d, np.abs(delta_Im), 'k', label='Num', lw=1.5, alpha=0.7)
    ylims = ax3.get_ylim()
    ax3.set_ylabel(r'$\Delta I_{\rm m}$')
    N1term = np.degrees(np.abs(
        np.sin(Ies - Ie1s) * ratio1s / (np.abs(ratios) - 1)))
    N2term = np.degrees(np.abs(
        np.sin(Ies - Ie2s) * ratio2s / (np.abs(ratios) - 2)))
    ax3.plot(I_d, N1term + N2term, 'g', label=r'Resonant', lw=1.5, alpha=0.7)
    ax3.legend(fontsize=12)
    ax3.set_ylim(ylims)
    ax3.set_xlabel(r'$I$ (Deg)')

    ax3.set_xticks([0, 45, 90, 135, 180])
    ax3.set_xticklabels([r'$0$', r'$45$', r'$90$', r'$135$', r'$180$'])

    fig.subplots_adjust(hspace=0.03)
    plt.tight_layout()
    plt.savefig(fn + '_m', dpi=600)
    plt.clf()

    if tm is None:
        fig, (ax2, ax4) = plt.subplots(2, 1, figsize=(6, 8), sharex=True,
                                       gridspec_kw={'height_ratios':[2, 5]})
    else:
        fig, (ax1, ax2, ax4) = plt.subplots(3, 1, figsize=(6, 10), sharex=True,
                                       gridspec_kw={'height_ratios':[2, 2, 5]})
        ax1.semilogy(I_degs, tm, 'k', lw=1)
        ax1.set_ylabel(r'Merger time (yr)')
    ax2.semilogy(I_d, As, 'k', lw=1)
    ax2.axhline(1, c='k', ls=':', lw=0.7, alpha=0.5)
    ax2.set_ylabel(r'$|\mathcal{A}|$')

    # correct range?
    # qslfs_ranged = np.minimum(qslfs, 180 - qslfs)
    ax4.plot(I_degs, qslfs, 'bo', ms=1.0, label='Data')

    # same as dl_prediction
    # ax4.plot(I_d, np.degrees(qeis), 'g', lw=1.5, alpha=0.7)
    Itot = [get_I1(_I1, getter_kwargs['eta']) for _I1 in I_d]
    qslf_dl = np.degrees(np.abs(Ies - np.radians(Itot)))
    ax4.plot(I_d, qslf_dl, 'r', lw=2)

    # do fill_between for 3 intervals, need 4 endpoints
    large_delta_idx = np.where(np.abs(delta_Im) > 5)[0]
    any_delta_idx = np.where(np.abs(delta_Im) > 0.1)[0]
    start1 = any_delta_idx[0]
    end1 = large_delta_idx[np.where(large_delta_idx < len(I_d) // 2)[0][-1]]
    start2 = large_delta_idx[np.where(large_delta_idx > len(I_d) // 2)[0][0]]
    end2 = any_delta_idx[-1]
    bound_low = np.minimum(
        np.abs(delta_Im - qslf_dl), np.abs(delta_Im + qslf_dl))
    bound_high = np.maximum(
        np.abs(delta_Im - qslf_dl), np.abs(delta_Im + qslf_dl))
    ax4.fill_between(
        I_d[end1:start2],
        bound_low[end1:start2],
        bound_high[end1:start2],
        color='r',
        alpha=0.3)
    ylims = ax4.get_ylim()
    ax4.fill_between(I_d[start1:end1], *ylims, color='r', alpha=0.3)
    ax4.fill_between(I_d[start2:end2], *ylims, color='r', alpha=0.3)
    ax4.set_ylim(ylims)

    ax4.set_xticks([0, 45, 90, 135, 180])
    ax4.set_xticklabels([r'$0$', r'$45$', r'$90$', r'$135$', r'$180$'])
    ax4.set_xlabel(r'$I_{\rm i}$ (Deg)')
    ax4.set_ylabel(r'$\theta_{\rm sl, f}$')

    fig.subplots_adjust(hspace=0.03)
    plt.tight_layout()
    plt.savefig(fn, dpi=600)
    plt.clf()

def run_long(I0d, tol=1e-8, tf=np.inf, t_inc=1000):
    folder = '8long'
    mkdirp(folder)
    I0 = np.radians(I0d)
    params = [30, 30, 30, 0.1, 3, 0]
    t_lk, _, _, _ = get_vals(*params, 80)
    getter_kwargs = get_eps(*params)
    af = 0.1

    fn = '%s/%d_run' % (folder, I0d)
    pkl_fn = fn + '.pkl'
    if not os.path.exists(pkl_fn):
        print('Running %s' % pkl_fn)
        num_ran = 0
        t_emaxes = []
        y_emaxes = []

        dydt = get_dydt(**getter_kwargs)

        # a1, e1, W, I1, w1, I2, sx, sy, sz = y
        I1 = np.radians(get_I1(I0d,
                               getter_kwargs['eta'] * np.sqrt(1 - 1e-6)))
        I2 = I0 - I1
        s0 = [np.sin(I1), 0, np.cos(I1)] # initial alignment
        y0 = [1, 1e-3, 0, I1, 0, I2, *s0]

        peak_event = lambda t, y: (y[4] % np.pi) - (np.pi / 2)
        peak_event.direction = +1 # only when w is increasing
        a_term_event = lambda t, y: y[0] - af
        a_term_event.terminal = True
        events=[peak_event, a_term_event]

        print('Running for I0=%d, t_i=%d' % (I0d, num_ran * t_inc))
        ret = solve_ivp(dydt, (0, t_inc), y0, events=events,
                        method='BDF', atol=tol, rtol=tol,
                        dense_output=True)
        t_emax = ret.t_events[0]
        t_emaxes.extend(t_emax)
        y_emaxes.extend(ret.sol(t_emax).T)

        while ret.y[0, -1] > af and ret.t[-1] < tf:
            num_ran += 1
            print('Running for I0=%d, t_i=%d, a=%.5f, emax=%.3f' %
                  (I0d, num_ran * t_inc, ret.y[0, -1],
                   ret.sol(t_emax[-1])[1]))
            y0 = ret.y[:,-1]
            del ret
            gc.collect()
            ret = solve_ivp(dydt,
                            (num_ran * t_inc, (num_ran + 1) * t_inc),
                            y0,
                            events=[peak_event],
                            method='BDF', atol=tol, rtol=tol,
                            dense_output=True)
            t_emax = ret.t_events[0]
            t_emaxes.extend(t_emax)
            y_emaxes.extend(ret.sol(t_emax).T)
            # dump incrementally
            with open(pkl_fn, 'wb') as f:
                pickle.dump((t_emaxes, y_emaxes), f)
    else:
        with open(pkl_fn, 'rb') as f:
            print('Loading %s' % pkl_fn)
            t_emaxes, y_emaxes = pickle.load(f)
    t_evals = np.array(t_emaxes) * t_lk

    a_vals, e_vals, W_vals, I1_vals, _, I2_vals, *s_vals = np.array(y_emaxes).T
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, sharex=True)
    l1hat = np.array([
        np.sin(I1_vals) * np.cos(W_vals),
        np.sin(I1_vals) * np.sin(W_vals),
        np.cos(I1_vals),
    ])
    qslfd = np.degrees(np.arccos(ts_dot(l1hat, s_vals)))

    ax1.plot(t_evals, a_vals * 0.1, 'k', alpha=0.7, lw=0.7)
    ax1.set_ylabel(r'$a$ (AU)')
    ax2.plot(t_evals, e_vals, 'k', alpha=0.7, lw=0.7)
    ax2.set_ylabel(r'$e$')
    ax3.plot(t_evals, np.degrees(I1_vals + I2_vals), 'k', alpha=0.7, lw=0.7)
    ax3.set_ylabel(r'$I$ (deg)')
    ax4.plot(t_evals, qslfd, 'k', alpha=0.7, lw=0.7)
    ax4.set_ylabel(r'$\theta_{\rm sl}$')
    ax3.set_xlabel(r'$t$ (yr)')
    ax4.set_xlabel(r'$t$ (yr)')
    plt.tight_layout()
    plt.savefig(fn, dpi=200)
    plt.close()

if __name__ == '__main__':
    # getter_kwargs = get_eps(*params)
    # Ilimd = get_Ilimd(**getter_kwargs)
    # get_qslf_for_I0_vec(np.radians(Ilimd + 0.35), tf=10, plot=True, tol=1e-10)
    # get_qslf_for_I0(np.radians(Ilimd + 0.35), tf=10, plot=True, tol=1e-10)
    # get_qslf_for_I0(np.radians(Ilimd - 0.35))
    # print(np.degrees(get_qeff0(np.radians(Ilimd + 0.35), params)[2]))
    # print(np.degrees(get_qeff0(np.radians(Ilimd - 0.35), params)[2]))
    # these two finally agree

    # qslfs_run()

    # get_qeff0(np.radians(85), params_in)
    bin_comp(I_degs_etanz, qslfs_nz, params_in)
    # params_smbh = 30, 30, 3e7, 0.1, 300, 0
    # bin_comp(I_degs_eta0, qslfs_eta0, params_smbh, fn='8bin_comp_eta0',
    #          tm=tm_eta0)
    # bin_comp(e0=1e-2, fn='8bin_comp_en2')
    # bin_comp(e0=3e-3, fn='8bin_comp_en1')

    # run_long(80, tol=1e-8)
    # run_long(70, tol=1e-8)
    # run_long(60, tol=1e-8)
    pass
